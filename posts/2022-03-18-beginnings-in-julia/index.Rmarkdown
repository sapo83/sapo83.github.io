---
title: Beginnings in Julia
author: Sarah Dexheimer
date: '2022-03-18'
slug: [beginnings_in_Julia]
categories:
  - Julia
tags:
  - abalone
  - data wrangling
  - Julia
  - learning out loud
showDate: yes
---

I've started learning [Julia](https://julialang.org/). It has been awhile since I taught myself a new language. I've been doing a combination of two things. 1) Working my way through [Think Julia: How to Think Like a Computer Scientist](https://benlauwens.github.io/ThinkJulia.jl/latest/book.html). 2) I've been trying to implement a random forest model using an abalone data set I downloaded for another project. Between these 2 methods, I've picked up a few things. I'm going to work through a few basic ideas here.

A little bit of set up before I get into this. I'm running these Julia code chunks in an Rmarkdown file (because that's why way my website is set up). To get them to work you need to install the [JuliaCall](https://hwborchers.github.io/) package & add a few extra lines of code to your setup code chunk. I've left the code chunk visible so you can see how I made this work. Also, you need to have [RCall](https://juliainterop.github.io/RCall.jl/stable/installation/) installed in Julia!


```{r setup, include=TRUE, message = FALSE}
library(JuliaCall)
julia_path = "/Applications/Julia-1.7.app/Contents/Resources/julia/bin"
julia_setup(julia_path)

knitr::opts_chunk$set(echo = TRUE)
```

Let's get into it! You can get the data file I used [here](https://archive.ics.uci.edu/ml/datasets/Abalone). `abalone.data` is the file we are going to be working with. Similar to R, we start by loading the packages we want to use. I prefer to set a path variable `BASE_DIR` as a standardized prefix for data files & any eventual output files. 

```{julia}
using DataFrames
using CSV

# set base directory variable
BASE_DIR = "/Users/sarah/Documents/learn_Julia/random_forest/data";

println(BASE_DIR)
```

**Tip:** using `println()` instead of `print` adds a new line to the end of whatever you print. 

Now that we've set our path, let's read in our file. There are a couple different ways to do that. Isn't there always?! I chose this way because it was the easiest for me to understand. Also, this dataset is relatively small so we aren't very worried about it taking too long to load.

The `string()` function concatenates our `BASE_DIR` variable with the file name. By specifying `DataFrame`, we can save our newly read in file as a data frame object immediately. We set the delimiter to `,` using `delim = ","`. We tell the `CSV.read()` function that our file has no hdear by using `header = false`.

We'll use `first()` to take a quick look at our data frame before we move on. 

```{julia}
dat = CSV.read(string(BASE_DIR, "/abalone.data"), DataFrame; delim = ",", header = false);

first(dat, 5)
```

Tip: If you're working in Visual Studio, etc, you don't have to use a semicolon at the end of each line. I'm doing it here to stop the output from automatically printing in R markdown. 

So now that we have our data frame. Let's rename our columns to something useful! We use `rename()` to set the names of each column. Then use `first()` to look at our handiwork.

```{julia}
rename!(dat, [:Sex, :Length, :Diameter, :Height, :Whole_Weight, :Shucked_Weight, :Viscera_Weight, :Shell_Weight, :Rings]);

first(dat, 5)
```

Looks good. I'd like to learn a bit more about the data in my data frame. First, we need to add the `StatsBase` package.  I'm going to use `countmap()` to find the count of each sex. Our data has 3 sexes: M (male), F (female), & I (infant).
```{julia}
using StatsBase

sex_count_dat = countmap(dat.Sex)

```

That's informative but let's plot it to get a better look! First, I'm going to make a list of the values I want on the tick marks in the specified order. Next I'll use `bar` to make the plot, using the `xticks` option to set my tick mark labels.

```{julia, fig.height = 4}
using StatsPlots

s = ["M", "F", "I"];
bar((x -> sex_count_dat[x]).(s), xticks = (1:3, s))

```

I'm going to stop here for now! This is definitely a very good start! 

**Possibly helpful side note** Getting Julia to render these plots using R markdown required a couple extra steps. My original Julia installation was 1.6 using the .dmg file provided by the Julia Org [website](https://julialang.org/downloads/). I wanted to upgrade to 1.7. I installed it using brew install. I ran into an error I couldn't figure out. I uninstalled v1.7 using brew & then did a new installation from [here](https://julialang.org/downloads/). Then I ran into a new error `could not load library "libjulia.1.dylib"`. To solve this, I created a symlink from the directory that Julia was looking in to the directory this file was actually in. That seems to have sovled my problem for now! Probably could've not spent 3 hours debugging this if I'd just done the symlink thing to begin with!

<center><iframe src="https://giphy.com/embed/d6TryGjzqrrmo" width="50%" height="426" frameBorder="0" class="giphy-embed" allowFullScreen data-external="1"></iframe></center>

Also, I had to run `brew reinstall icu4c` in the terminal to get `blogdown::hugo_build()` to work. It's been so long since I've done a blog post that I'm not even sure what that's about. 

Hope you found this helpful! If you have any questions/comments/concerns/feedback, Iâ€™d love to hear from you! Feel free to reach out to me on [Twitter](https://twitter.com/sapo83).
